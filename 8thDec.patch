diff --cc projects/lpc40xx_freertos/l4_io/led_matrix/shapes.h
index 30299c5,3db5ed8..0000000
--- a/projects/lpc40xx_freertos/l4_io/led_matrix/shapes.h
+++ b/projects/lpc40xx_freertos/l4_io/led_matrix/shapes.h
@@@ -1,10 -1,11 +1,12 @@@
  #pragma once
  #include "alphabets.h"
  #include "led_matrix.h"
++#include "object_tracking.h"
  #include <stdint.h>
  
 -typedef enum { FRIEND, ENEMY, LIFE } game_object_type;
 +typedef enum { FRIEND, ENEMY, LIFE, NONE } game_object_type;
- extern const uint8_t empty[8], test[8], enemy_1[8], enemy_2[8], enemy_3[8], data4[8], cursor[8];
+ extern const uint8_t empty[8], test[8], enemy_1[8], enemy_2[8], enemy_3[8], friend_fill[8], friend_2[8], friend_3[8],
+     friend_w1[8], friend_w2[8], data4[8], cursor[8];
  
  /**
   * Shape update draws the shape which has been passed as parameters to the function.
diff --cc projects/lpc40xx_freertos/l5_application/main.c
index 366c375,7c6519c..0000000
--- a/projects/lpc40xx_freertos/l5_application/main.c
+++ b/projects/lpc40xx_freertos/l5_application/main.c
@@@ -30,10 -29,13 +29,15 @@@
  
  #include "mp3.h"
  
+ #include "uart.h"
+ #include <stdlib.h>
+ #include <string.h>
+ 
  extern volatile uint8_t zigbee_joystick_message[Max_message_elemets];
  extern volatile uint8_t zigbee_gun_message[Max_message_elemets];
- static uint8_t game_level;
++static uint8_t game_level = 1;
 +
+ uint8_t change_song = 1;
  #ifdef DEF_TASK
  // 'static' to make these functions 'private' to this file
  static void create_blinky_tasks(void);
@@@ -49,21 -51,19 +53,24 @@@ static void gun_shot_detect_task(void *
  static void joystick_task(void *p);
  static void gun_send_task(void *p);
  static void send_mp3_task(void *p);
 +static void controller_object_display_task(void *p);
++static void game_play_level_monitor_task(void *p);
  
  int main(void) {
    // create_blinky_tasks();
    // create_uart_task();
  
    // LED Matrix tasks
-   // zigbee__comm_init(true);
+   zigbee__comm_init(true);
 -  mp3__init();
 -  xTaskCreate(send_mp3_task, "uart", 2048 / sizeof(void *), NULL, PRIORITY_MEDIUM, NULL);
 +  // mp3__init();
 +  // xTaskCreate(send_mp3_task, "uart", 2048 / sizeof(void *), NULL, PRIORITY_MEDIUM, NULL);
-   // xTaskCreate(display_task, "display", 1024 / sizeof(void *), NULL, PRIORITY_HIGH, NULL);
-   // xTaskCreate(graphics_task, "graphics", 1024 / sizeof(void *), NULL, PRIORITY_LOW, NULL);
-   // xTaskCreate(receive_zigbee_task, "zigbee_receive", 2048 / sizeof(void *), NULL, PRIORITY_HIGH, NULL);
+   xTaskCreate(display_task, "display", 1024 / sizeof(void *), NULL, PRIORITY_HIGH, NULL);
+   xTaskCreate(graphics_task, "graphics", 1024 / sizeof(void *), NULL, PRIORITY_LOW, NULL);
+   xTaskCreate(receive_zigbee_task, "zigbee_receive", 2048 / sizeof(void *), NULL, PRIORITY_HIGH, NULL);
 -  xTaskCreate(gun_shot_task, "gun shot detected", 1024 / sizeof(void *), NULL, PRIORITY_LOW, NULL);
 +  // xTaskCreate(gun_shot_detect_task, "gun shot detected", 1024 / sizeof(void *), NULL, PRIORITY_LOW, NULL);
-   // xTaskCreate(controller_object_display_task, "gun pointer, friend object display", 512 / sizeof(void *), NULL, PRIORITY_MEDIUM, NULL);
++  xTaskCreate(game_play_level_monitor_task, "Update game level", 512 / sizeof(void *), NULL, PRIORITY_MEDIUM, NULL);
++  xTaskCreate(controller_object_display_task, "gun pointer, friend object display", 512 / sizeof(void *), NULL,
++              PRIORITY_MEDIUM, NULL);
  
    // Joystick related tasks
    // zigbee__comm_init(false);
@@@ -93,56 -93,28 +100,72 @@@ void display_task(void *p) 
    }
  }
  
 +void controller_object_display_task(void *p) {
 +  while (1) {
 +    shape_update(zigbee_gun_message[X_coord], zigbee_gun_message[Y_coord], cursor, WHITE, NONE);
-     shape_update(zigbee_joystick_message[X_coord], zigbee_joystick_message[Y_coord], enemy_3, BLUE, FRIEND);
++    // shape_update(zigbee_joystick_message[X_coord], zigbee_joystick_message[Y_coord], enemy_3, BLUE, FRIEND);
++    draw_friend(zigbee_joystick_message[X_coord], zigbee_joystick_message[Y_coord]);
 +    vTaskDelay(50);
 +  }
 +}
 +
 +void game_play_level_monitor_task(void *p) {
 +  while (1) {
-     vTaskDelay(20);
++    if (game_level < 3)
++      game_level++;
++    else
++      game_level = 1;
++
++    vTaskDelay(60 * 1000);
 +  }
 +}
 +
  void graphics_task(void *p) {
    graphics__turn_off_all_leds();
    initialize_object_details();
-   // char test = "test";
- 
-   // void (*draw_enemy_pointer)(void);
-   // draw_enemy_pointer = &draw_enemy;
++  static uint8_t number_of_live_enemies;
  
-   // uint8_t hit = 1;
 +  static uint16_t game_play_speed = 100;
    while (1) {
  
-     switch(game_level)
-     {
-       case 1:
-        
-         game_play_speed = 70;
-         break;
- 
-       case 2:
 -    // randomizer_objects();
 -    // randomizer_objects_level_1();
 -    randomizer_objects_level_2();
 -    led_matrix__clear_data_buffer();
++    switch (game_level) {
++    case 1:
++      game_play_speed = 100;
++      number_of_live_enemies = 5;
++      randomizer_objects_level_1();
++      break;
++
++    case 2:
++      game_play_speed = 70;
++      number_of_live_enemies = 8;
++      randomizer_objects_level_2();
++      break;
+ 
 -    update_friend_location();
++    case 3:
++      number_of_live_enemies = 10;
++      game_play_speed = 50;
++      randomizer_objects();
++      break;
++
++    default:
++      break;
 +    }
  
 +    // Clear previous data
 +    led_matrix__clear_data_buffer();
- 
-     // Initialize X-Y coordinate for the object
-     randomizer_objects_level_1();
++    update_alive_enemies(number_of_live_enemies);
 +
 +    // Draw all the live objects
      draw_from_structure();
+ 
 -    led_matrix__set_pixel(zigbee_gun_message[X_coord], 63 - zigbee_gun_message[Y_coord], RED);
++    // Detect the collision
++    collision_detection();
+ 
++    // Update the score
      print_score(enemy_score, 1, 32, RED);
      print_score(life, 1, 0, GREEN);
  
-     // detect_click(zigbee_joystick_message[X_coord], zigbee_joystick_message[Y_coord], hit);
--    collision_detection();
--    vTaskDelay(50);
++    vTaskDelay(game_play_speed);
    }
  }
  
@@@ -166,20 -138,30 +189,38 @@@ void receive_zigbee_task(void *p) 
  
  void send_mp3_task(void *p) {
    mp3__send_command(C_SEL_DEV, D_TF_CARD);
+   change_song = 1;
+   update_mp3_details(DEFAULT_BG, default_bg_duration);
    while (1) {
-     mp3__send_command(C_PLAY_W_VOL, 0x0201);
-     vTaskDelay(4000);
+     switch (mp3_details.mp3_to_play) {
+     case DEFAULT_BG:
+       if (change_song == 1) {
+         mp3__send_command(C_ONE_CY_PLAY_FOLD, 0x0101);
+         change_song = 0;
+       }
+       break;
+ 
+     case GUNSHOT:
+       mp3__send_command(C_PLAY_FOLD_FILE, 0x0201);
+       change_song = 1;
+       vTaskDelay(mp3_details.mp3_duration);
+       break;
+ 
+     default:
+       break;
+     }
    }
+   vTaskDelay(4000);
  }
  
 +void gun_shot_detect_task(void *p) {
 +  while (1) {
 +    if (xSemaphoreTake(gun_shot_detect_semaphore, portMAX_DELAY)) {
 +      detect_click(zigbee_gun_message[X_coord], zigbee_gun_message[Y_coord], 1);
 +    }
 +  }
 +}
 +
  //**************************************************************************************************
  // Joystick tasks **********************************************************************************
  //**************************************************************************************************
diff --git a/projects/lpc40xx_freertos/l4_io/led_matrix/object_tracking.c b/projects/lpc40xx_freertos/l4_io/led_matrix/object_tracking.c
index d0e06fe..208c2c9 100644
--- a/projects/lpc40xx_freertos/l4_io/led_matrix/object_tracking.c
+++ b/projects/lpc40xx_freertos/l4_io/led_matrix/object_tracking.c
@@ -30,7 +30,7 @@ void initialize_object_details() {
 
 void randomizer_objects() {
   int random;
-  for (int i = 0; i < number_of_objects; i++) {
+  for (int i = 2; i < number_of_objects; i++) {
     random = rand() % 3;
     random = random - 1;
     onscreen_objects_struct[i].row += random;
@@ -47,7 +47,7 @@ void randomizer_objects() {
 
 void randomizer_objects_level_1() {
 
-  for (int i = 1; i < number_of_objects; i++) {
+  for (int i = 2; i < number_of_objects; i++) {
 
     if ((onscreen_objects_struct[i].row < -8) || (onscreen_objects_struct[i].row > 71))
       onscreen_objects_struct[i].row = rand() % 63;
@@ -78,13 +78,13 @@ void randomizer_objects_level_2() {
 
 void draw_from_structure() {
 
-  for (uint8_t i = 0; i < number_of_objects; i++) {
+  for (uint8_t i = 1; i < number_of_objects; i++) {
     if (onscreen_objects_struct[i].status) {
       switch (onscreen_objects_struct[i].obj_nature) {
 
-      case FRIEND_OBJECT:
-        draw_friend(onscreen_objects_struct[i].row, onscreen_objects_struct[i].column);
-        break;
+        // case FRIEND_OBJECT:
+        //   draw_friend(onscreen_objects_struct[i].row, onscreen_objects_struct[i].column);
+        //   break;
 
       case ENEMY_OBJECT:
         draw_enemy(onscreen_objects_struct[i].row, onscreen_objects_struct[i].column);
@@ -226,11 +226,21 @@ uint8_t set_bit_position(uint64_t temp) {
   return (column);
 }
 
-void update_friend_location() {
+void update_friend_location(int x, int y) {
+
+  onscreen_objects_struct[0].row = x;
+  onscreen_objects_struct[0].column = y;
+}
 
-  onscreen_objects_struct[0].row = zigbee_joystick_message[X_coord];
-  onscreen_objects_struct[0].column = zigbee_joystick_message[Y_coord];
+void update_alive_enemies(int number_of_enemies) {
+  if ((number_of_enemies + 2) > number_of_objects)
+    return;
+  for (int i = 2; i < (number_of_enemies + 2); i++) {
+    if (onscreen_objects_struct[i].status == 0) {
+      onscreen_objects_struct[i].status = 1;
+      onscreen_objects_struct[i].column = 63;
+    }
+  }
+}
 
-  // onscreen_objects_struct[0].row = 45;
-  // onscreen_objects_struct[0].column = 13;
-}
\ No newline at end of file
+int object_row_param_getter(int object_index) { return onscreen_objects_struct[object_index].row; }
\ No newline at end of file
diff --git a/projects/lpc40xx_freertos/l4_io/led_matrix/object_tracking.h b/projects/lpc40xx_freertos/l4_io/led_matrix/object_tracking.h
index a778f9c..f94ab36 100644
--- a/projects/lpc40xx_freertos/l4_io/led_matrix/object_tracking.h
+++ b/projects/lpc40xx_freertos/l4_io/led_matrix/object_tracking.h
@@ -1,11 +1,10 @@
 #pragma once
 #include "shapes.h"
-#include "zigbee.h"
 #include <stdbool.h>
 #include <stdint.h>
 #include <time.h>
 
-#define number_of_objects 8
+#define number_of_objects 20
 
 uint8_t life, enemy_score;
 
@@ -70,4 +69,17 @@ void collision_detection();
  */
 uint8_t set_bit_position(uint64_t temp);
 
-void update_friend_location();
\ No newline at end of file
+/**
+ *
+ */
+void update_friend_location(int x, int y);
+
+/**
+ * This function check through all of the enemies required for the geme level.
+ * If it finds the enemy not alive, make status alive and overwrite the column to be
+ * 63. Hence call this function after calling randomizer so that it can overwrite the
+ * column value.
+ */
+void update_alive_enemies(int number_of_enemies);
+
+int object_row_param_getter(int object_index);
\ No newline at end of file
diff --git a/projects/lpc40xx_freertos/l4_io/led_matrix/shapes.c b/projects/lpc40xx_freertos/l4_io/led_matrix/shapes.c
index 9cb87ce..8c3cf74 100644
--- a/projects/lpc40xx_freertos/l4_io/led_matrix/shapes.c
+++ b/projects/lpc40xx_freertos/l4_io/led_matrix/shapes.c
@@ -21,6 +21,11 @@ void draw_enemy(int x, int y) {
 }
 
 void draw_friend(int x, int y) {
+  int prev_friend_row = object_row_param_getter(0);
+  for (int i = prev_friend_row; i < prev_friend_row + 8; i++)
+    frame_buffer[i][FRIEND_PLANE] = 0;
+
+  update_friend_location(x, y);
 
   shape_update(x, y, friend_fill, FILL, FRIEND);
 
diff --git a/projects/lpc40xx_freertos/l4_io/mp3/mp3.h b/projects/lpc40xx_freertos/l4_io/mp3/mp3.h
index 421ff4f..4698717 100644
--- a/projects/lpc40xx_freertos/l4_io/mp3/mp3.h
+++ b/projects/lpc40xx_freertos/l4_io/mp3/mp3.h
@@ -36,7 +36,7 @@ _____________|_____________
 
 #define C_D_NONE 0x00
 
-typedef enum { DEFAULT_BG = 0, GUNSHOT = 1, GAME_OVER = 1, NONE } MP3_SOUNDS;
+typedef enum { DEFAULT_BG = 0, GUNSHOT = 1, GAME_OVER = 1, MAX_TRACK } MP3_SOUNDS;
 
 const uint32_t default_bg_duration, gunshot_duration;
 
